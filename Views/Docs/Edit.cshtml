@model OnlyOfficeDemo.Models.OnlyOfficeConfig
@{
    Layout = null;
    var configJson = System.Text.Json.JsonSerializer.Serialize(Model.Config);
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>ONLYOFFICE Editor</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style> html, body { height:100%; margin:0; } #editor { height:100vh; } </style>
</head>
<body>
    <div id="editor">
        <div style="padding: 20px; text-align: center;">
            <h3>Loading document editor...</h3>
            <p>If the editor doesn't appear within a few seconds, please check the following:</p>
            <ul style="text-align: left; max-width: 600px; margin: 0 auto;">
                <li>Make sure the OnlyOffice Document Server is running and accessible</li>
                <li>Check browser console for any JavaScript errors</li>
                <li>Verify that the document file exists and is accessible</li>
            </ul>
        </div>
    </div>
    
    <script>
        // Display configuration for debugging
        const docConfig = @Html.Raw(configJson);
        console.log('OnlyOffice Config:', docConfig);
        console.log('API JS URL:', '@Model.DocumentServerApiJs');

        function showLoadError(message) {
            console.error(message);
            document.getElementById('editor').innerHTML = `
                <div style="padding: 20px; color: red; text-align: center;">
                    <h3>Error: OnlyOffice API not loaded</h3>
                    <p>The OnlyOffice Document Server API could not be loaded from: <br><code>@Model.DocumentServerApiJs</code></p>
                    <p>${message}</p>
                    <ul style="text-align: left; max-width: 600px; margin: 0 auto;">
                        <li>Verify DocumentServer is running at <code>@Model.DocumentServerApiJs.Split("/web-apps")[0]</code></li>
                        <li>On iOS in-app browsers, try “Open in Safari/Chrome”</li>
                        <li>Check network stability and try again</li>
                    </ul>
                    <p><a href="/">Return to document list</a></p>
                </div>
            `;
        }

        function initEditorIfReady() {
            if (window.DocsAPI) {
                try {
                    const editor = new DocsAPI.DocEditor('editor', docConfig);
                    console.log('Editor initialized successfully');
                    return true;
                } catch (e) {
                    console.error('Error initializing OnlyOffice editor:', e);
                    showLoadError('Initialization failed: ' + (e && e.message ? e.message : e));
                }
            }
            return false;
        }

        (function loadApiWithRetry() {
            const maxTries = 3;
            let attempt = 0;

            function addScript() {
                const s = document.createElement('script');
                // Bust caches on retries to avoid partially cached aborts
                s.src = '@Model.DocumentServerApiJs' + (attempt > 0 ? ('?r=' + Date.now()) : '');
                s.async = true;
                s.defer = true;
                s.onerror = function () {
                    attempt++;
                    if (attempt <= maxTries) {
                        const backoff = Math.min(1000 * Math.pow(2, attempt - 1), 5000);
                        console.warn('Retry loading api.js in', backoff, 'ms (attempt', attempt, 'of', maxTries, ')');
                        setTimeout(addScript, backoff);
                    } else {
                        showLoadError('Failed to load api.js after multiple attempts.');
                    }
                };
                s.onload = function () {
                    if (!initEditorIfReady()) {
                        // Very rare: loaded but global not ready yet – try once more shortly
                        setTimeout(function(){ initEditorIfReady() || showLoadError('DocsAPI not available after load.'); }, 500);
                    }
                };
                document.head.appendChild(s);
            }

            // If the page becomes visible again (e.g., user returns from background), retry once
            document.addEventListener('visibilitychange', function () {
                if (document.visibilityState === 'visible' && typeof window.DocsAPI === 'undefined' && attempt === 0) {
                    console.log('Page visible; retry loading api.js');
                    attempt = 1; // mark as a retry path
                    addScript();
                }
            });

            addScript();
        })();
    </script>
</body>
</html>
